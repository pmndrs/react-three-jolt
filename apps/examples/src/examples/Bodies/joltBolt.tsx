/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
*/

import { useMemo } from "react";
import { useLoader } from "@react-three/fiber";
import * as THREE from "three";
import { SVGLoader } from "three/addons/loaders/SVGLoader.js";
import { BufferGeometryUtils } from "three/examples/jsm/Addons.js";
/*
export function JoltBolt(props) {
	const { nodes, materials } = useGLTF("/models/joltBolt.glb");

	// log out the maps
	return (
		<group {...props} dispose={null}>
			<mesh castShadow receiveShadow geometry={nodes.Cube002.geometry}>
				<meshPhongMaterial side={DoubleSide} color="gold" />
			</mesh>
		</group>
	);
}

useGLTF.preload("/models/joltBolt.glb");
*/

// lets rewrite this to use a SVG becuase my model has normals issues

export function JoltBolt(props: any) {
	// load the svg and make a geometry, do it only once.
	const svg = useLoader(SVGLoader, "/joltBolt.svg");
	const geometry = useMemo(() => {
		const shapes = svg.paths.flatMap((path) => {
			const shape = path.toShapes(true);
			return shape;
		});
		const extrudeSettings = {
			steps: 2,
			depth: 70,
			bevelEnabled: true,
			bevelThickness: 1,
			bevelSize: 1,
			bevelOffset: 0,
			bevelSegments: 1
		};
		const extruded = new THREE.ExtrudeGeometry(shapes, extrudeSettings);
		extruded.center();
		// we need an index and the vertexes cleaned up
		return BufferGeometryUtils.mergeVertices(extruded);
	}, [svg]);

	return (
		<group>
			<mesh geometry={geometry} {...props} castShadow receiveShadow>
				<meshStandardMaterial color="#D08F3E" />
			</mesh>
		</group>
	);
}
